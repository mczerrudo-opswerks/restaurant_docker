name: Django Tests (Docker Compose)

on:
  push:
  pull_request:
  workflow_dispatch:  # allow manual runs from the Actions tab

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: restaurantApi.settings
      DB_HOST: postgres
      DB_PORT: "5432"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate CI .env (from Secrets)
        run: |
          cat > .env <<'EOF'
          # Database
          DB_NAME=${{ secrets.CI_DB_NAME }}
          DB_USER=${{ secrets.CI_DB_USER }}
          DB_PASSWORD=${{ secrets.CI_DB_PASSWORD }}
          DB_HOST=postgres
          DB_PORT=5432

          # Django
          DJANGO_SETTINGS_MODULE=restaurantApi.settings
          SECRET_KEY=${{ secrets.CI_SECRET_KEY }}

          # Email
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_HOST_USER=${{ secrets.CI_EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.CI_EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=true
          EMAIL_USE_SSL=false
          DEFAULT_FROM_EMAIL=restaurant_api <${{ secrets.CI_EMAIL_HOST_USER }}>

          # Redis
          REDIS_URL=${{ secrets.CI_REDIS_URL || 'redis://redis:6379/1' }}
          EOF
          # Mask sensitive values in logs
          sed -E 's/(DB_PASSWORD=|SECRET_KEY=|EMAIL_HOST_PASSWORD=).*/\1******/' .env

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: Build images
        run: docker compose -f docker-compose.yml build

      - name: Start Postgres & Redis (detached)
        run: docker compose -f docker-compose.yml up -d postgres redis

      - name: Wait for Postgres (SQL ping)
        run: |
          for i in {1..40}; do
            if docker compose exec -T postgres_db psql -U "${{ secrets.DB_USER }}" -d "${{ secrets.DB_NAME }}" -c "select 1" >/dev/null 2>&1; then
              echo "Postgres is ready"; break
            fi
            sleep 3
          done
          docker compose ps

      - name: Run makemigrations
        run:  docker exec -ti django_app python manage.py makemigrations

      - name: Run migrations
        run:  docker exec -ti django_app python manage.py migrate
      - name: Run test
        run:  docker exec -ti django_app python manage.py test

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v
